@inject IProductService ProductService
@implements IDisposable
@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span> Loading... </span>
}
else
{


    <ul class="list-unstyled">
        @foreach (var product in ProductService.Products)
        {
            <li classs="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">
                        @* $@product.Price *@
                        @GetPriceText(product)
                    </h5>
                </div>
            </li>
        }
    </ul>
    <h3>ProductList</h3>
}
@code {
    //private static List<Product> Products = new List<Product>();

    // protected override async Task OnInitializedAsync()
    // {
    //     // Since we inject IProductService now we don't need to use http client call below...
    //     // var result = await http.GetFromJsonAsync<ServiceResponse<List<Product>>>("api/product");
    //     // if (result != null && result.Data != null) {
    //     //     Products = result.Data;
    //     // }
    //     // Now we use the Service call
    //     await ProductService.GetProducts();
    // }

    ////Now we invoke by category - Not async any more
    // this below is about detecting changes on the category such as Books, Movies, Vedeo-games
    protected override void OnInitialized()
    {
        //this is where it subscripted to the productchanged event  -so it rerendering 
        ProductService.ProductChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductChanged -= StateHasChanged;
    }

    private string  GetPriceText(Product product)
    {
        var variants = product.Variants;
        if(variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"Now $:{variants[0].Price}";
        }
        decimal minPrice = variants.Min(s => s.Price);
        return $"Starting at $:{minPrice}";

    }


}
